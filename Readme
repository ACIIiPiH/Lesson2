P01 (*) Найти последний элемент списка.
Пример:
    1> p01:last([a,b,c,d,e,f]).
    [f]

P02 (*) Найти двa последних элемента списка.
Пример:
    1> p02:but_last([a,b,c,d,e,f]).
    [e,f]


P03 (*) Найти N-й элемент списка.
Пример:
    1> p03:element_at([a,b,c,d,e,f], 4).
    d
    2> p03:element_at([a,b,c,d,e,f], 10).
    undefined


P04 (*) Посчитать количество элементов списка.
Пример:
    1> p04:len([]).
    0
    2> p04:len([a,b,c,d]).
    4

P05 (*) Перевернуть список.
Пример:
    1> p05:reverse([1,2,3]).
    [3,2,1]

P06 (*) Определить, является ли список палиндромом.
Пример:
    1> p06:is_palindrome([1,2,3,2,1]).
    true

P07 (**) Выровнять структуру с вложеными списками.
Пример:
    1> p07:flatten([a,[b,[c,d],e]]).
    [a,b,c,d,e]

P08 (**) Удалить последовательно следующие дубликаты.
Пример:
    1> p08:compress([a,a,a,a,b,c,c,a,a,d,e,e,e,e]).
    [a,b,c,a,d,e]

P09 (**) Запаковать последовательно следующие дубликаты во вложеные списки.
Пример:
    1> p09:pack([a,a,a,a,b,c,c,a,a,d,e,e,e,e]).
    [[a,a,a,a],[b],[c,c],[a,a],[d],[e,e,e,e]]

P10 (**) Закодировать список с использованием алгоритма RLE.
Пример:
    1> p10:encode([a,a,a,a,b,c,c,a,a,d,e,e,e,e]).
    [{4,a},{1,b},{2,c},{2,a},{1,d},{4,e}]

P11 (**) Закодировать список с использованием модифицированого алгоритма RLE.
Пример:
    1> p11:encode-modified([a,a,a,a,b,c,c,a,a,d,e,e,e,e]).
    [{4,a},b,{2,c},{2,a},d,{4,e}]

P12 (**) Написать декодер для модифицированого алгоритма RLE.
Пример:
    1> p12:decode-modified([{4,a},b,{2,c},{2,a},d,{4,e}]).
    [a,a,a,a,b,c,c,a,a,d,e,e,e,e]

P13 (**) Написать декодер для стандартного алгоритма RLE.
Пример:
    1> p13:decode([{4,a},{1,b},{2,c},{2,a},{1,d},{4,e}]).
    [a,a,a,a,b,c,c,a,a,d,e,e,e,e]

P14 (*) Написать дубликатор всех элементов входящего списка.
Пример:
    1> p14:duplicate([a,b,c,c,d]).
    [a,a,b,b,c,c,c,c,d,d]

P15 (**) Написать функцию-репликатор всех элементов входящего списка.
Пример:
    1> p15:replicate([a,b,c], 3).
    [a,a,a,b,b,b,c,c,c]
